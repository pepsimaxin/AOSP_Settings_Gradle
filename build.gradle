// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = '1.9.0'
//        kotlin_version = '1.7.20'
    }

    repositories {
        google()
        maven {
            url 'https://maven.aliyun.com/repository/jcenter'
        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
        }
        maven {
            url 'https://maven.aliyun.com/repository/google'
        }
//        maven {
//            // r8 maven
//            url = uri("https://storage.googleapis.com/r8-releases/raw")
//        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.0-rc01'
//        classpath 'com.android.tools:r8:8.2.16-dev'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'com.google.protobuf'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

android {
    namespace 'com.android.settings'
    packagingOptions {
        exclude 'META-INF/androidx.window_window.version'
    }

    configurations {
        all*.exclude group: 'androidx.window', module: 'window'
        all*.exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    compileSdk = 34

    defaultConfig {
        applicationId "com.android.settings"
        minSdkVersion 31
        targetSdkVersion 34
        versionCode 34
        versionName "34.0"
    }

    buildTypes {
        release {
            minifyEnabled false
        }

        debug {
            minifyEnabled false
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "Settings.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main {
            java.srcDirs = ['src']
            res.srcDirs = ['res', 'res-export', 'res-product']
            assets.srcDirs = ['assets']
//            proto.srcDirs = ['protos']
            manifest.srcFile 'AndroidManifest.xml'
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.0' // 假设1.4.0支持Kotlin 1.9.0
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
//    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compileOnly files('libs/framework.jar')

    implementation "com.google.guava:guava:33.3.1-android"

    implementation files('libs/BiometricsSharedLib.jar')
    implementation files('libs/BiometricsSharedLib-java.jar')
    implementation files('libs/SystemUIUnfoldLib.jar')
    implementation files('libs/android.hardware.dumpstate-V1-java.jar')
    implementation files('libs/android.hardware.dumpstate-V1.0-java.jar')
    implementation files('libs/android.hardware.dumpstate-V1.1-java.jar')
    implementation files('libs/com_android_server_accessibility_flags_lib.jar')
    implementation files('libs/net-utils-framework-common.jar')
    implementation files('libs/notification_flags_lib.jar')
    implementation files('libs/securebox.jar')

    //    implementation files('../libs/FingerprintManagerInteractor.jar')
    implementation files('libs/MediaDrmSettingsFlagsLib.jar')
//    implementation files('../libs/Settings-change-ids.jar')
    // SettingsLib的依赖在后面整体配置
    implementation files('libs/aconfig_settings_flags_lib.jar')
    implementation files('libs/accessibility_settings_flags_lib.jar')
    implementation files('libs/app-usage-event-protos-lite.jar')
    implementation files('libs/battery-event-protos-lite.jar')
    implementation files('libs/battery-usage-slot-protos-lite.jar')
    implementation files('libs/contextualcards.aar ')
    implementation files('libs/development_settings_flag_lib.jar')
    implementation files('libs/factory_reset_flags_lib.jar')
    implementation files('libs/fuelgauge-log-protos-lite.jar')
    implementation files('libs/fuelgauge-usage-state-protos-lite.jar')
    implementation files('libs/power-anomaly-event-protos-lite.jar')
    implementation files('libs/settings-contextual-card-protos-lite.jar')
    implementation files('libs/settings-log-bridge-protos-lite.jar')
    implementation files('libs/settings-logtags.jar')
    implementation files('libs/settings-telephony-protos-lite.jar')
//    implementation files('../libs/setupdesign-lottie-loading-layout.jar')
//    implementation project(':lottie_loading_layout')

    implementation files('libs/statslog-settings.jar')
    implementation files('libs/settingslib_flags_lib.jar')
    implementation files('libs/wifi_aconfig_flags_lib.jar')
    implementation files('libs/android.view.accessibility.flags-aconfig-java.jar')
    implementation files('libs/telephony_flags_core_java_lib.jar')

    implementation project(':WifiTrackerLib')
    implementation project(':iconloaderlib')
    implementation project(':setupdesign')
    implementation project(':setupcompat')

    implementation project(':SettingsLib')
    implementation project(':SettingsLib:ActionBarShadow')
    implementation project(':SettingsLib:ActionButtonsPreference')
    implementation project(':SettingsLib:ActivityEmbedding')
    implementation project(':SettingsLib:AdaptiveIcon')
    implementation project(':SettingsLib:AppPreference')
    implementation project(':SettingsLib:BannerMessagePreference')
    implementation project(':SettingsLib:BarChartPreference')
    implementation project(':SettingsLib:ButtonPreference')
    implementation project(':SettingsLib:CollapsingToolbarBaseActivity')
    implementation project(':SettingsLib:DeviceStateRotationLock')
    implementation project(':SettingsLib:DisplayUtils')
    implementation project(':SettingsLib:EmergencyNumber')
    implementation project(':SettingsLib:EntityHeaderWidgets')
    implementation project(':SettingsLib:FooterPreference')
    implementation project(':SettingsLib:HelpUtils')
    implementation project(':SettingsLib:IllustrationPreference')
    implementation project(':SettingsLib:LayoutPreference')
    implementation project(':SettingsLib:MainSwitchPreference')
    implementation project(':SettingsLib:ProfileSelector')
    implementation project(':SettingsLib:ProgressBar')
    implementation project(':SettingsLib:RadioButtonPreference')
    implementation project(':SettingsLib:RestrictedLockUtils')
    implementation project(':SettingsLib:SchedulesProvider')
    implementation project(':SettingsLib:Search')
    implementation project(':SettingsLib:SearchProvider')
    implementation project(':SettingsLib:SearchWidget')
    implementation project(':SettingsLib:SelectorWithWidgetPreference')
    implementation project(':SettingsLib:SettingsSpinner')
    implementation project(':SettingsLib:SettingsTheme')
    implementation project(':SettingsLib:SettingsTransition')
//    implementation project(':SettingsLib:Spa')
    implementation project(':SettingsLib:SpaPrivileged')
    implementation project(':SettingsLib:Tile')
    implementation project(':SettingsLib:TopIntroPreference')
    implementation project(':SettingsLib:TwoTargetPreference')
    implementation project(':SettingsLib:UsageProgressBarPreference')
    implementation project(':SettingsLib:Utils')

    implementation project(':spa')

    implementation files('libs/settingslib_media_flags_lib.jar')
    implementation files('libs/core-all.jar')
    implementation files('libs/android.hidl.base-V1.0-java.jar')

    implementation "com.google.protobuf:protoc:3.8.0"
    implementation "com.google.protobuf:protobuf-javalite:3.8.0"

    implementation("com.github.bumptech.glide:glide:4.11.0") {
        exclude group: "com.android.support"    // 排除掉 com.android.support 组
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    annotationProcessor files('libs/CP-SettingsLib-annotation-processor.jar')    // search 生成索引类插件

    // baseline profile
    implementation "androidx.profileinstaller:profileinstaller:1.3.1"

    api("androidx.slice:slice-core:1.1.0-alpha02")
    api("androidx.slice:slice-view:1.1.0-alpha02")
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "com.google.android.material:material:1.7.0-alpha03"
    implementation "androidx.slice:slice-builders:1.1.0-alpha02"
    implementation "androidx.slice:slice-core:1.1.0-alpha02"
    implementation "androidx.slice:slice-view:1.1.0-alpha02"
    implementation "com.airbnb.android:lottie:6.5.0"
    implementation "androidx.compose.material3:material3:1.1.0-alpha06"
    implementation "androidx.compose.material:material-icons-core:1.7.0-alpha03"
    implementation "androidx.preference:preference:1.2.1"
    implementation "androidx.room:room-runtime:2.7.0-alpha01"
    annotationProcessor "androidx.room:room-compiler:2.7.0-alpha01"
    implementation "org.jetbrains.kotlinx:atomicfu:0.26.1"
    implementation "androidx.compose.runtime:runtime-livedata:1.4.0-alpha01"


    implementation "androidx.constraintlayout:constraintlayout:2.2.0"
}

//allprojects {
//    repositories {
//        maven {
//            url 'https://maven.aliyun.com/repository/jcenter'
//        }
//        maven {
//            url 'https://maven.aliyun.com/repository/central'
//        }
//        maven {
//            url 'https://maven.aliyun.com/repository/google'
//        }
//    }

//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            if (options.bootstrapClasspath != null) {
//                Set<File> fileSet = options.bootstrapClasspath.getFiles()
//                List<File> newFileList = new ArrayList<>()
//                // 相对位置，根据存放的位置修改路径
//                newFileList.add(new File("libs-compile/framework.jar"))
//                newFileList.add(new File("libs-compile/core-all.jar"))
//                newFileList.addAll(fileSet)
//                options.bootstrapClasspath = files(
//                        newFileList.toArray()
//                )
//            }
//        }
//    }
//}

//protobuf {
//    protoc {
//        // 通用 artifact
//        artifact = 'com.google.protobuf:protoc:3.8.0'
//        // MacOS
//        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
//            artifact = 'com.google.protobuf:protoc:3.8.0:osx-x86_64'
//        }
//    }
//
//    generateProtoTasks {
//        all().each { task ->
//            task.builtins {
//                remove java
//                java {
//                    option "lite"
//                }
//            }
//        }
//    }
//}