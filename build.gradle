// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = '1.9.0'
    }

    repositories {
        google()
        maven {
            url 'https://maven.aliyun.com/repository/jcenter'
        }
        maven {
            url 'https://maven.aliyun.com/repository/central'
        }
        maven {
            url 'https://maven.aliyun.com/repository/google'
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'com.google.protobuf'
//apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

android {
    packagingOptions {
        exclude 'META-INF/androidx.window_window.version'
    }

    configurations {
        all*.exclude group: 'androidx.window', module: 'window'
        all*.exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    compileSdk = 34

    defaultConfig {
        applicationId "com.android.settings"
        minSdkVersion 31
        targetSdkVersion 34
        versionCode 34
        versionName "34.0"
    }

    buildTypes {
        release {
            minifyEnabled false
        }

        debug {
            minifyEnabled false
        }

        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "Settings.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main {
            java.srcDirs = ['src']
            res.srcDirs = ['res', 'res-export', 'res-product']
            assets.srcDirs = ['assets']
//            proto.srcDirs = ['protos']
            manifest.srcFile 'AndroidManifest.xml'
        }
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.0' // 假设1.4.0支持Kotlin 1.9.0
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation project(':SettingsLib')
    implementation project(':WifiTrackerLib')
    implementation project(':iconloaderlib')
    implementation project(':setupdesign')
    implementation project(':setupcompat')
    implementation "com.google.protobuf:protoc:3.8.0"
    implementation "com.google.protobuf:protobuf-javalite:3.8.0"

    implementation("com.github.bumptech.glide:glide:4.11.0") {
        exclude group: "com.android.support"    // 排除掉 com.android.support 组
    }
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    annotationProcessor files('libs/CP-SettingsLib-annotation-processor.jar')    // search 生成索引类插件

    // baseline profile
    implementation "androidx.profileinstaller:profileinstaller:1.3.1"

    api("androidx.slice:slice-core:1.1.0-alpha02")
    api("androidx.slice:slice-view:1.1.0-alpha02")

    implementation "androidx.constraintlayout:constraintlayout:2.2.0"
}

//allprojects {
//    repositories {
//        maven {
//            url 'https://maven.aliyun.com/repository/jcenter'
//        }
//        maven {
//            url 'https://maven.aliyun.com/repository/central'
//        }
//        maven {
//            url 'https://maven.aliyun.com/repository/google'
//        }
//    }

//    gradle.projectsEvaluated {
//        tasks.withType(JavaCompile) {
//            if (options.bootstrapClasspath != null) {
//                Set<File> fileSet = options.bootstrapClasspath.getFiles()
//                List<File> newFileList = new ArrayList<>()
//                // 相对位置，根据存放的位置修改路径
//                newFileList.add(new File("libs-compile/framework.jar"))
//                newFileList.add(new File("libs-compile/core-all.jar"))
//                newFileList.addAll(fileSet)
//                options.bootstrapClasspath = files(
//                        newFileList.toArray()
//                )
//            }
//        }
//    }
//}

//protobuf {
//    protoc {
//        // 通用 artifact
//        artifact = 'com.google.protobuf:protoc:3.8.0'
//        // MacOS
//        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
//            artifact = 'com.google.protobuf:protoc:3.8.0:osx-x86_64'
//        }
//    }
//
//    generateProtoTasks {
//        all().each { task ->
//            task.builtins {
//                remove java
//                java {
//                    option "lite"
//                }
//            }
//        }
//    }
//}